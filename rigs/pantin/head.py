import bpy

from ...utils import copy_bone
from ...utils import make_deformer_name, strip_org
from ...utils import create_bone_widget, create_widget, create_cube_widget
from ...utils import connected_children_names, has_connected_children

from . import pantin_utils

class Rig:
    def __init__(self, obj, bone_name, params):
        self.obj = obj
        self.params = params

        self.neck = bone_name
        self.head = connected_children_names(self.obj, bone_name)[0]
        self.jaw = self.obj.data.bones[self.head].children[0].name

        self.org_bones = [self.neck, self.head, self.jaw]

    def generate(self):
        bpy.ops.object.mode_set(mode='EDIT')
        
        ctrl_chain = []
        def_chain = []

        eb = self.obj.data.edit_bones
        for i, b in enumerate(self.org_bones):
            # Control bones
            ctrl_bone = copy_bone(self.obj, b)
            ctrl_bone_e = eb[ctrl_bone]

            # Name
            ctrl_bone_e.name = strip_org(b)

            # Parenting
            if i == 0:
                # First bone
                if eb[b].parent is not None:
                    bone_parent_name = strip_org(eb[b].parent.name)
                    ctrl_bone_e.parent = eb[bone_parent_name]
            else:
                # The rest
                ctrl_bone_e.parent = eb[ctrl_chain[-1]]

            # Add to list
            ctrl_chain += [ctrl_bone_e.name]

            # Def bones
            def_bone = pantin_utils.create_deformation(self.obj, b, self.params.Z_index, i)
            def_chain.append(def_bone)

        bpy.ops.object.mode_set(mode='OBJECT')
        pb = self.obj.pose.bones

        # Widgets
        neck = ctrl_chain[0]
        head = ctrl_chain[1]
        jaw = ctrl_chain[2]

#        create_cube_widget(self.obj, pelvis, radius=1.0)

        pantin_utils.create_capsule_widget(self.obj, neck)

        # Constraints
        for org, ctrl in zip(self.org_bones, ctrl_chain):
            con = pb[org].constraints.new('COPY_TRANSFORMS')
            con.name = "copy_transforms"
            con.target = self.obj
            con.subtarget = ctrl
        
        con = pb[neck].constraints.new('LIMIT_ROTATION')
        con.name = "limit_rotation"
        con.use_limit_z = True
        con.min_z = -1.14
        con.max_z = 1.5
        con.owner_space = 'LOCAL'

        con = pb[head].constraints.new('LIMIT_ROTATION')
        con.name = "limit_rotation"
        con.use_limit_z = True
        con.min_z = -0.5
        con.max_z = 0.68
        con.owner_space = 'LOCAL'

        con = pb[jaw].constraints.new('LIMIT_ROTATION')
        con.name = "limit_rotation"
        con.use_limit_z = True
        con.min_z = 0.0
        con.max_z = 0.39
        con.owner_space = 'LOCAL'

def add_parameters(params):
    params.Z_index = bpy.props.IntProperty(name="Indice Z", default=0, description="DÃ©finit l'ordre des membres dans l'espace")
    params.mutable_order = bpy.props.BoolProperty(name="Ordre change", default=True, description="Ce membre peut changer de profondeur")

def parameters_ui(layout, params):
    """ Create the ui for the rig parameters.
    """
    r = layout.row()
    r.prop(params, "Z_index")
    r = layout.row()
    r.prop(params, "mutable_order")

def create_sample(obj):
    # generated by rigify.utils.write_metarig
    bpy.ops.object.mode_set(mode='EDIT')
    arm = obj.data

    bones = {}

    bone = arm.edit_bones.new('Cou')
    bone.head[:] = 0.1611, 0.0000, 1.3800
    bone.tail[:] = 0.2614, 0.0000, 1.4641
    bone.roll = -2.2684
    bone.use_connect = False
    bones['Cou'] = bone.name
    bone = arm.edit_bones.new('Tete')
    bone.head[:] = 0.2614, 0.0000, 1.4641
    bone.tail[:] = 0.2935, 0.0000, 1.6094
    bone.roll = -2.9241
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['Cou']]
    bones['Tete'] = bone.name
    bone = arm.edit_bones.new('Machoire')
    bone.head[:] = 0.2935, 0.0000, 1.4777
    bone.tail[:] = 0.3976, 0.0000, 1.4107
    bone.roll = -0.9986
    bone.use_connect = False
    bone.parent = arm.edit_bones[bones['Tete']]
    bones['Machoire'] = bone.name

    bpy.ops.object.mode_set(mode='OBJECT')
    pbone = obj.pose.bones[bones['Cou']]
    pbone.rigify_type = 'pantin.head'
    pbone.lock_location = (False, False, True)
    pbone.lock_rotation = (True, True, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (True, True, True)
    pbone.rotation_mode = 'XZY'
    try:
        pbone.rigify_parameters.Z_index = 3
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.mutable_order = False
    except AttributeError:
        pass
    pbone = obj.pose.bones[bones['Tete']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, True)
    pbone.lock_rotation = (True, True, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (True, True, True)
    pbone.rotation_mode = 'XZY'
    pbone = obj.pose.bones[bones['Machoire']]
    pbone.rigify_type = ''
    pbone.lock_location = (True, True, True)
    pbone.lock_rotation = (True, True, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (True, True, True)
    pbone.rotation_mode = 'XZY'

    bpy.ops.object.mode_set(mode='EDIT')
    for bone in arm.edit_bones:
        bone.select = False
        bone.select_head = False
        bone.select_tail = False
    for b in bones:
        bone = arm.edit_bones[bones[b]]
        bone.select = True
        bone.select_head = True
        bone.select_tail = True
        arm.edit_bones.active = bone
