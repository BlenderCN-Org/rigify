import bpy

from ...utils import copy_bone
from ...utils import make_deformer_name, strip_org
from ...utils import create_bone_widget, create_widget, create_cube_widget
from ...utils import connected_children_names, has_connected_children

from . import pantin_utils

class Rig:
    def __init__(self, obj, bone_name, params):
        self.obj = obj
        self.params = params

        self.org_bones = [bone_name] + connected_children_names(self.obj, bone_name)

    def generate(self):
        bpy.ops.object.mode_set(mode='EDIT')
        
        ctrl_chain = []
        def_chain = []

        eb = self.obj.data.edit_bones
        for i, b in enumerate(self.org_bones):
            # Control bones
            ctrl_bone = copy_bone(self.obj, b)
            ctrl_bone_e = eb[ctrl_bone]

            # Name
            ctrl_bone_e.name = strip_org(b)

            # Parenting
            if i == 0:
                # First bone: neck
                if eb[b].parent is not None:
                    bone_parent_name = strip_org(eb[b].parent.name)
                    ctrl_bone_e.parent = eb[bone_parent_name]
            elif i >= len(self.org_bones)-1:
                # Parent jaw and eyelid to the head (1)
                ctrl_bone_e.parent = eb[ctrl_chain[1]]
            else:
                # The rest
                ctrl_bone_e.parent = eb[ctrl_chain[-1]]

            # Add to list
            ctrl_chain += [ctrl_bone_e.name]

            # Def bones
            def_bone = pantin_utils.create_deformation(self.obj, b, self.params.mutable_order, self.params.member_Z_index, self.params.first_bone_Z_index + i)
            def_chain.append(def_bone)

        bpy.ops.object.mode_set(mode='OBJECT')
        pb = self.obj.pose.bones

#        create_cube_widget(self.obj, pelvis, radius=1.0)

        # pantin_utils.create_capsule_widget(self.obj, neck)

        # Constraints
        for org, ctrl in zip(self.org_bones, ctrl_chain):
            con = pb[org].constraints.new('COPY_TRANSFORMS')
            con.name = "copy_transforms"
            con.target = self.obj
            con.subtarget = ctrl
        
        # con = pb[neck].constraints.new('LIMIT_ROTATION')
        # con.name = "limit_rotation"
        # con.use_limit_z = True
        # con.min_z = -1.14
        # con.max_z = 1.5
        # con.owner_space = 'LOCAL'

        # con = pb[head].constraints.new('LIMIT_ROTATION')
        # con.name = "limit_rotation"
        # con.use_limit_z = True
        # con.min_z = -0.5
        # con.max_z = 0.68
        # con.owner_space = 'LOCAL'

        # con = pb[jaw].constraints.new('LIMIT_ROTATION')
        # con.name = "limit_rotation"
        # con.use_limit_z = True
        # con.min_z = 0.0
        # con.max_z = 0.39
        # con.owner_space = 'LOCAL'

        # con = pb[eyelid].constraints.new('LIMIT_ROTATION')
        # con.name = "limit_rotation"
        # con.use_limit_z = True
        # con.min_z = -0.39
        # con.max_z = 0.0
        # con.owner_space = 'LOCAL'

def add_parameters(params):
    params.member_Z_index = bpy.props.FloatProperty(name="Indice Z membre", default=0.0, description="Définit l'ordre des membres dans l'espace")
    params.first_bone_Z_index = bpy.props.FloatProperty(name="Indice Z premier os", default=0.0, description="Définit l'ordre des os dans l'espace")
    params.mutable_order = bpy.props.BoolProperty(name="Ordre change", default=True, description="Ce membre peut changer de profondeur")

def parameters_ui(layout, params):
    """ Create the ui for the rig parameters.
    """
    r = layout.row()
    r.prop(params, "member_Z_index")
    r.prop(params, "first_bone_Z_index")
    r = layout.row()
    r.prop(params, "mutable_order")

def create_sample(obj):
    # generated by rigify.utils.write_metarig
    bpy.ops.object.mode_set(mode='EDIT')
    arm = obj.data

    bones = {}
